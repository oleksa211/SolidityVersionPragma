pragma solidity ^0.8.1;
contract SimpleContract {
    string public greeting;     // State variable to store a string
    event GreetingUpdated(string newGreeting); // Event emitted when the greeting is updated
    address public owner;  // Address of the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
    }
    constructor2() {
        greeting = "Hello, World!";  // Initialize the greeting and set the contract owner
        owner = msg.sender;
    }
    function updateGreeting(string memory _newGreeting) public onlyOwner {
        greeting = _newGreeting;
        emit GreetingUpdated(_newGreeting);
    }
    function getGreeting() public view returns (string memory) {
        return greeting;
    }
}

contract Simple2 {
    string public greeting;     // State variable to store a string
    event GreetingUpdated(string newGreeting); // Event emitted when the greeting is updated
    address public owner;  // Address of the contract owner

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
    }
    constructor() {
        greeting = "Hello, World!";  // Initialize the greeting and set the contract owner
        owner = msg.sender;
    }

    function updateGreeting(string memory _newGreeting) public onlyOwner {
        greeting = _newGreeting;
        emit GreetingUpdated(_newGreeting);
    }

    function getGreeting() {
        return greeting;
    }
}
